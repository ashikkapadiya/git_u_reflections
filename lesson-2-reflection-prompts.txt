What happens when you initialize a repository? Why do you need to do it?
Initial commit contain nothing. It create .git file which will contain the messages
for new commits.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
It is intermediate state between working directory and repository, so that from 
working directory we can take files for changes and add them to staging area and 
then to the repository through commits.

How can you use the staging area to make sure you have one commit per logical
change?
If there are multiple files that are updated we can put each of them separately to 
the staging area for a single logical change, then we can include all the changes
to one commit and put them in repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
-when there are multiple team members or contributors want to implement same features in different 
ways
-when there are more than one versions requring changes to generate different set of 
output
-when there are more use cases of a project and to test them individually. 

How do the diagrams help you visualize the branch structure?
-It gives pointers where we created branches and it can give us idea about the tree
structured commit history to identify about a perticular branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
-Merging is required when we need to combine different branches with different 
features. 
-Diagram representation helps in indentifying the commit histroy for braches during 
the branching phase.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
